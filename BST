#include <iostream>

using namespace std;

struct Node {
    int key;
    Node* left;
    Node* right;
};

class BST {
private:
    Node* root;

    Node* getNodeBST(int newKey) {
        Node* tmp = new Node();
        tmp->key = newKey;
        tmp->left = nullptr;
        tmp->right = nullptr;
        return tmp;
    }

    bool insert(Node*& T, int newKey) {
        Node* q = nullptr;
        Node* p = T;

        while (p != nullptr) {
            if (newKey == p->key)
                return true;
            q = p;
            if (newKey < p->key)
                p = p->left;
            else
                p = p->right;
        }

        Node* newNode = getNodeBST(newKey);
        if (T == nullptr) {
            T = newNode;
        }
        else if (newKey > q->key) {
            q->right = newNode;
        }
        else {
            q->left = newNode;
        }
        return false;
    }

    Node* searchBST(Node* T, int searchKey) {
        Node* p = T;
        while (p != nullptr) {
            if (p->key < searchKey)
                p = p->right;
            else if (p->key > searchKey)
                p = p->left;
            else
                return p;
        }
        return nullptr;
    }

    Node* searchParentBST(Node* T, int searchKey) {

        Node* p = T;
        Node* q = nullptr;

        while (p != nullptr) {
            if (p->key < searchKey) {
                q = p;
                p = p->right;
            }
            else if (p->key > searchKey) {
                q = p;
                p = p->left;
            }
            else
                return q;
        }
        return nullptr;
    }

    Node* eraseBST(Node*& T, int deleteKey) {

        Node* p = searchBST(T, deleteKey);
        Node* q = searchParentBST(T, deleteKey);

        if (p == nullptr) {
            cerr << "d " << deleteKey << ": The key does not exist" << endl;
            return q;
        }

        if (p->left == nullptr && p->right == nullptr) {
            if (q == nullptr) T = nullptr;
            else {
                if (q->left == p) q->left = nullptr;
                else q->right = nullptr;
            }
            delete p;
        }
        else if (p->left == nullptr || p->right == nullptr) {
            Node* child = (p->left != nullptr) ? p->left : p->right;
            if (q == nullptr) {
                T = child;
            }
            else {
                if (q->left == p)
                    q->left = child;
                else
                    q->right = child;
            }
            delete p;
        }
        else {
            Node* r = nullptr;
            bool flag;
            if (height(p->left) > height(p->right)) {
                r = maxNode(p->left);
                flag = 0;
            }
            else if (height(p->left) < height(p->right)) {
                r = minNode(p->right);
                flag = 1;
            }
            else {
                if (size(p->left) >= size(p->right)) {
                    r = maxNode(p->left);
                    flag = 0;
                }
                else {
                    r = minNode(p->right);
                    flag = 1;
                }
            }

            int tmpKey = r->key;
            eraseBST(T, r->key);
            p->key = tmpKey;
        }

        return q;
    }

    Node* minNode(Node* T) {
        Node* q = nullptr;
        Node* p = T;
        while (p != nullptr) {
            q = p;
            p = p->left;
        }
        return q;
    }

    Node* maxNode(Node* T) {
        Node* q = nullptr;
        Node* p = T;
        while (p != nullptr) {
            q = p;
            p = p->right;
        }
        return q;
    }

    int height(Node* T) {
        if (!T) return 0;
        int leftHeight = 0, rightHeight = 0;
        if (T->left) leftHeight = height(T->left);
        if (T->right) rightHeight = height(T->right);
        return (leftHeight > rightHeight) ? leftHeight + 1 : rightHeight + 1;
    }

    int size(Node* T) {
        if (T == nullptr) return 0;
        int leftCount = size(T->left);
        int rightCount = size(T->right);
        return 1 + leftCount + rightCount;
    }

    void inOrder(Node* node) {
        if (node != nullptr) {
            cout << "<";
            inOrder(node->left);
            if (node->left) cout << "\0x20";
            cout << node->key;
            if (node->right) cout << "\0x20";
            inOrder(node->right);
            cout << ">";
        }
    }

    void clear(Node*& T) {
        if (T != nullptr) {
            clear(T->left);
            clear(T->right);
            delete T;
            T = nullptr;
        }
    }

public:
    BST() : root(nullptr) {}

    void insert(int newKey) {
        if (insert(root, newKey)) {
            cerr << "i " << newKey << ": The key already exists" << endl;
            return;
        }
        display();
    }

    void deleteKey(int deleteKey) {
        eraseBST(root, deleteKey);
        display();
    }

    void display() {
        if (root == nullptr) {
            cout << endl;
        }
        else {
            inOrder(root);
            cout << endl;
        }
    }

    void clear() {
        clear(root);
    }
};

int main() {
    BST tree;
    char operation;
    int key;

    while (cin >> operation >> key) {
        if (operation == 'i') {
            tree.insert(key);
        }
        else if (operation == 'd') {
            tree.deleteKey(key);
        }
    }

    tree.clear();
    return 0;
}
